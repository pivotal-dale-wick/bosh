<%=
params = {
  'name' => p('director.name'),
  'port' => p('director.backend_port'),
  'encryption' => p('director.encryption'),
  'max_tasks' => p('director.max_tasks'),
  'max_threads' => p('director.max_threads'),
  'logging' => {
    'level' => 'DEBUG',
    'file' =>  "/var/vcap/sys/log/director/<" + "%= ENV['COMPONENT'] %" + ">.debug.log"
  },
  'mbus' => "nats://#{p('nats.user')}:#{p('nats.password')}@#{p('nats.address')}:#{p('nats.port')}",
  'dir' => '/var/vcap/store/director',
  'db' => {
    'adapter' => p('director.db.adapter'),
    'user' => p('director.db.user'),
    'password' => p('director.db.password'),
    'host' => p('director.db.host'),
    'port' => p('director.db.port'),
    'database' => p('director.db.database'),
    'connection_options' => p('director.db.connection_options')
  },
  'snapshots' => {
    'enabled'=> p('director.enable_snapshots')
  },
  'max_vm_create_tries' => p('director.max_vm_create_tries'),
  'enable_post_deploy' => p('director.enable_post_deploy'),
  'enable_nats_delivered_templates' => p('director.enable_nats_delivered_templates'),
  'generate_vm_passwords' => p('director.generate_vm_passwords'),
  'remove_dev_tools' => p('director.remove_dev_tools'),
  'log_access_events_to_syslog' => p('director.log_access_events_to_syslog'),
  'flush_arp' => p('director.flush_arp'),
  'local_dns' => p('director.local_dns')
}

config_server = {
    'enabled' => p('director.config_server.enabled')
}
if config_server['enabled']
 config_server['url'] = p('director.config_server.url')
 config_server['ca_cert_path'] = '/var/vcap/jobs/director/config/config_server_ca.cert'

 config_server['uaa'] = {
    'url' => p('director.config_server.uaa.url'),
    'client_id' => p('director.config_server.uaa.client_id'),
    'client_secret' => p('director.config_server.uaa.client_secret'),
    'ca_cert_path' => '/var/vcap/jobs/director/config/uaa_server_ca.cert'
 }
end
params['config_server'] = config_server

params['scheduled_jobs'] = []

if_p('director.snapshot_schedule') do |snapshot_schedule|
  params['scheduled_jobs'] << {
    'command' => 'SnapshotDeployments',
    'schedule' =>  snapshot_schedule
  }
end

if_p('director.self_snapshot_schedule') do |self_snapshot_schedule|
  params['scheduled_jobs'] << {
    'command' => 'SnapshotSelf',
    'schedule' =>  self_snapshot_schedule
  }
end

if_p('director.backup_schedule') do |backup_schedule|
  params['scheduled_jobs'] << {
    'command' => 'ScheduledBackup',
    'schedule' =>  backup_schedule
  }
end

params['scheduled_jobs'] << {
  'command' => 'ScheduledOrphanCleanup',
  'schedule' => p('director.disks.cleanup_schedule'),
  'params' => [{'max_orphaned_age_in_days' => p('director.disks.max_orphaned_age_in_days')}]
}

params['record_events'] = p('director.events.record_events')
if params['record_events']
  params['scheduled_jobs'] << {
    'command' => 'ScheduledEventsCleanup',
    'schedule' => p('director.events.cleanup_schedule'),
    'params' => [{'max_events' => p('director.events.max_events')}]
  }
end

if_p('director.debug.keep_unreachable_vms') do |keep_unreachable_vms|
  params['keep_unreachable_vms'] = keep_unreachable_vms
end

if_p('director.enable_virtual_delete_vms') do |enable_virtual_delete_vms|
	params['enable_virtual_delete_vms'] = enable_virtual_delete_vms
end

params['scan_and_fix'] = {
  'auto_fix_stateful_nodes' => p('director.auto_fix_stateful_nodes')
}

if_p('dns.db.adapter', 'dns.db.user', 'dns.db.password', 'dns.db.host',
     'dns.db.port', 'dns.db.database', 'dns.db.connection_options', 'dns.address') do
  |adapter, user, password, db_host, port, database, connection_options, address|
  params['dns'] = {
    'server' => address,
    'flush_command' => '/var/vcap/jobs/powerdns/bin/powerdns_ctl flush',
    'db' => {
        'adapter' => adapter,
        'user' => user,
        'password' => password,
        'host' => db_host,
        'port' => port,
        'database' => database,
        'connection_options' => connection_options
     }
  }

  if_p('dns.domain_name') do |domain_name|
    params['dns']['domain_name'] = domain_name
  end
end

if p('blobstore.provider') == 's3'
  blobstore_options = {
    'bucket_name' => p('blobstore.bucket_name'),
    'credentials_source' => p('blobstore.credentials_source', 'static'),
    'access_key_id' => p('blobstore.access_key_id', nil),
    'secret_access_key' => p('blobstore.secret_access_key', nil),
    'region' => p('blobstore.s3_region', nil)
  }

  if_p('blobstore.use_ssl') do |use_ssl|
     blobstore_options['use_ssl'] = use_ssl
  end

  if_p('blobstore.s3_port') do |s3_port|
     blobstore_options['port'] = s3_port
  end

  if_p('blobstore.host') do |host|
     blobstore_options['host'] = host
  end

  if_p('blobstore.ssl_verify_peer') do |ssl_verify_peer|
     blobstore_options['ssl_verify_peer'] = ssl_verify_peer
  end

  if_p('blobstore.s3_signature_version') do |s3_signature_version|
     blobstore_options['s3_signature_version'] = s3_signature_version
  end

  if_p('blobstore.server_side_encryption') do |server_side_encryption|
     blobstore_options['server_side_encryption'] = server_side_encryption
  end

  if_p('blobstore.sse_kms_key_id') do |sse_kms_key_id|
     blobstore_options['sse_kms_key_id'] = sse_kms_key_id
  end
else
  blobstore_options = {
    'endpoint' => "http://#{p('blobstore.address')}:#{p('blobstore.port')}",
    'user' => p('blobstore.director.user'),
    'password' => p('blobstore.director.password')
  }
end

params['blobstore'] = {
  'provider' => p('blobstore.provider'),
  'options' => blobstore_options
}

if p('blobstore.provider') == "s3"
   params['blobstore']['provider'] = "s3cli"
   params['blobstore']['options']['s3cli_config_path'] = "/var/vcap/data/tmp/director"
   params['blobstore']['options']['s3cli_path'] = "/var/vcap/packages/s3cli/bin/s3cli"
end

if p('blobstore.provider') == "dav"
   params['blobstore']['provider'] = "davcli"
   params['blobstore']['options']['davcli_config_path'] = "/var/vcap/data/tmp/director"
   params['blobstore']['options']['davcli_path'] = "/var/vcap/packages/davcli/bin/davcli"
end

user_management = {
    'provider' => p('director.user_management.provider')
}

if p('director.user_management.provider') == 'uaa'
  options = {
    'url' => p('director.user_management.uaa.url', nil),
    'urls' => p('director.user_management.uaa.urls', nil),
    'symmetric_key' => p('director.user_management.uaa.symmetric_key', nil),
    'public_key' => p('director.user_management.uaa.public_key', nil)
  }

  if options['url'].nil? && options['urls'].nil?
    raise 'UAA provider requires either url or urls key'
  end

  if options['url'] && options['urls']
    raise 'UAA provider takes either url or urls key'
  end

  if options['url']
    options.delete('urls')
  elsif options['urls']
    options.delete('url')
  end

  if options['symmetric_key'].nil? && options['public_key'].nil?
    raise 'UAA provider requires symmetric or public key'
  end

  user_management['uaa'] = options
else
  # making optional for backwards compatibility with micro bosh plugin
  user_management['local'] = {
    'users' => p('director.user_management.local.users', [])
  }
end

params['ignore_missing_gateway'] = p('director.ignore_missing_gateway')
params['user_management'] = user_management
params['trusted_certs'] = p('director.trusted_certs')

if_p('compiled_package_cache.options.bucket_name') do |bucket_name|
  params['compiled_package_cache'] = {
    'provider' => 's3cli',
    'options' => {
      'bucket_name' => bucket_name,
      'credentials_source' => p('compiled_package_cache.options.credentials_source', 'static'),
      'access_key_id' => p('compiled_package_cache.options.access_key_id', nil),
      'secret_access_key' => p('compiled_package_cache.options.secret_access_key', nil),
      'region' => p('blobstore.s3_region', nil),
      's3cli_config_path' => "/var/vcap/data/tmp/director",
      's3cli_path' => "/var/vcap/packages/s3cli/bin/s3cli",
    }
  }

  options = params['compiled_package_cache']['options']

  if_p('compiled_package_cache.options.s3_port') do |port|
     options['port'] = port
  end

  if_p('compiled_package_cache.options.host') do |host|
     options['host'] = host
  end

  if_p('compiled_package_cache.options.use_ssl') do |use_ssl|
      options['use_ssl'] = use_ssl
  end

  if_p('compiled_package_cache.options.ssl_verify_peer') do |ssl_verify_peer|
      options['ssl_verify_peer'] = ssl_verify_peer
  end

  if_p('compiled_package_cache.options.s3_signature_version') do |s3_signature_version|
     options['s3_signature_version'] = s3_signature_version
  end

  if_p('compiled_package_cache.options.server_side_encryption') do |server_side_encryption|
     options['server_side_encryption'] = server_side_encryption
  end

  if_p('compiled_package_cache.options.sse_kms_key_id') do |sse_kms_key_id|
     options['sse_kms_key_id'] = sse_kms_key_id
  end
end

if_p('compiled_package_cache.options.blobstore_path') do |blobstore_path|
  params['compiled_package_cache'] = {
    'provider' => 'local',
    'options' => {
      'blobstore_path' => blobstore_path
  }
}
end

if_p('director.backup_destination') do |backup_destination|
  params['backup_destination'] = backup_destination
end

if_p('director.default_ssh_options.gateway_host',
        'director.default_ssh_options.gateway_user') do |gateway_host, gateway_user|
  params['default_ssh_options'] = {
    'gateway_host' => gateway_host,
    'gateway_user' => gateway_user
  }
end

cpi_job_name = p('director.cpi_job')
params['cloud'] = {
    'provider' => {
      'name' => cpi_job_name,
      'path' => "/var/vcap/jobs/#{cpi_job_name}/bin/cpi",
  },
  'properties' => {}
}

params['cloud']['properties']['agent'] = {
 'ntp' => p('ntp'),
 'blobstore' => {'provider' => p('blobstore.provider'), 'options' => {} },
 'mbus' => "nats://#{p('nats.user')}:#{p('nats.password')}@#{p(['agent.nats.address', 'nats.address'])}:#{p('nats.port')}"
}

agent_blobstore_options =  params['cloud']['properties']['agent']['blobstore']['options']
if p('blobstore.provider') == "s3"
  agent_blobstore_options['bucket_name'] = p('blobstore.bucket_name')
  agent_blobstore_options['credentials_source'] = p(['agent.blobstore.credentials_source', 'blobstore.credentials_source'], 'static')
  agent_blobstore_options['access_key_id'] = p(['agent.blobstore.access_key_id', 'blobstore.access_key_id'], nil)
  agent_blobstore_options['secret_access_key'] = p(['agent.blobstore.secret_access_key', 'blobstore.secret_access_key'], nil)
  agent_blobstore_options['region'] = p(['agent.blobstore.s3_region', 'blobstore.s3_region'], nil)

  port = p(['agent.blobstore.s3_port', 'blobstore.s3_port'], nil)
  unless port.nil?
      agent_blobstore_options['port'] = port
  end

  host = p(['agent.blobstore.host', 'blobstore.host'], nil)
  unless host.nil?
    agent_blobstore_options['host'] = host
  end

  use_ssl = p(['agent.blobstore.use_ssl', 'blobstore.use_ssl'], nil)
  unless use_ssl.nil?
    agent_blobstore_options['use_ssl'] = use_ssl
  end

  ssl_verify_peer = p(['agent.blobstore.ssl_verify_peer', 'blobstore.ssl_verify_peer'], nil)
  unless ssl_verify_peer.nil?
    agent_blobstore_options['ssl_verify_peer'] = ssl_verify_peer
  end

  s3_signature_version = p(['agent.blobstore.s3_signature_version', 'blobstore.s3_signature_version'], nil)
  unless s3_signature_version.nil?
    agent_blobstore_options['s3_signature_version'] = s3_signature_version
  end

  server_side_encryption = p(['agent.blobstore.server_side_encryption', 'blobstore.server_side_encryption'], nil)
  unless server_side_encryption.nil?
    agent_blobstore_options['server_side_encryption'] = server_side_encryption
  end

  sse_kms_key_id = p(['agent.blobstore.sse_kms_key_id', 'blobstore.sse_kms_key_id'], nil)
  unless sse_kms_key_id.nil?
    agent_blobstore_options['sse_kms_key_id'] = sse_kms_key_id
  end
else
  agent_blobstore_options['endpoint'] = "http://#{p(['agent.blobstore.address', 'blobstore.address'])}:#{p('blobstore.port')}"
  agent_blobstore_options['user'] = p('blobstore.agent.user')
  agent_blobstore_options['password'] = p('blobstore.agent.password')
end

JSON.dump(params)
%>
